{"version":3,"file":"main.84cc1113e278dabe87bc.bundle.js","sources":["webpack:///./src/components/RangePicker.jsx"],"sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  Header,\n  Footer,\n  RangeInput,\n  RangePickerContainer,\n  PickerBodyContainer,\n  RangeCell,\n} from './shared';\nimport {\n  addMonth,\n  subMonth,\n  whetherBefore,\n  whetherSameDay,\n} from '../helper';\n\nclass RangePicker extends Component {\n  constructor(props) {\n    super(props);\n    const {\n      defaultFromInput,\n      defaultToInput,\n    } = this.props;\n    this.state = {\n      fromDate: defaultFromInput,\n      toDate: defaultToInput,\n      fromMonth: new Date(),\n      toMonth: addMonth(new Date(), 1),\n      editting: false,\n      buttonCounter: 0,\n      whetherFirstInput: true,\n    };\n  }\n\n\n  componentDidUpdate() {\n    const { fromDate, toDate } = this.state;\n\n    this.calculateNewRage(fromDate, toDate);\n  }\n\n  calculateNewRage = (fromDate, toDate) => {\n    const { onRangeSelected } = this.props;\n    if (!whetherSameDay(fromDate, toDate) && !whetherBefore(fromDate, toDate)) {\n      this.setState(prevState => ({\n        ...prevState,\n        fromDate: toDate,\n        toDate: fromDate,\n      }));\n      onRangeSelected(toDate, fromDate);\n    } else {\n      onRangeSelected(fromDate, toDate);\n    }\n  }\n\n  prevMonth = () => {\n    this.setState(prevState => ({\n      ...prevState,\n      fromMonth: subMonth(prevState.fromMonth, 1),\n      toMonth: subMonth(prevState.toMonth, 1),\n    }));\n  }\n\n  nextMonth = () => {\n    this.setState(prevState => ({\n      ...prevState,\n      fromMonth: addMonth(prevState.fromMonth, 1),\n      toMonth: addMonth(prevState.toMonth, 1),\n    }));\n  }\n\n  onSave = () => {\n    this.setState(prevState => ({ ...prevState, editting: false }));\n  }\n\n  onButtonClick = (e) => {\n    e.preventDefault();\n\n    this.setState(prevState => ({ ...prevState, editting: true }));\n  }\n\n  onItemClick = (date) => {\n    const { whetherFirstInput } = this.state;\n    if (whetherFirstInput) {\n      this.setState(prevState => ({\n        ...prevState,\n        whetherFirstInput: false,\n        fromDate: date,\n        toDate: prevState.toDate,\n      }));\n    } else {\n      this.setState(prevState => ({\n        ...prevState,\n        whetherFirstInput: true,\n        fromDate: prevState.fromDate,\n        toDate: date,\n      }));\n    }\n  }\n\n\n  render() {\n    const {\n      fromDate,\n      toDate,\n      fromMonth,\n      toMonth,\n      editting,\n      buttonCounter,\n      whetherFirstInput,\n    } = this.state;\n    const {\n      minDate,\n      maxDate,\n      className,\n      withLabel,\n      fromInputLabel,\n      toInputLabel,\n    } = this.props;\n\n    return (\n      <RangePickerContainer>\n        <RangeInput\n          toDate={toDate}\n          fromDate={fromDate}\n          onButtonClick={this.onButtonClick}\n          whetherFirstInput={whetherFirstInput}\n          withLabel={withLabel}\n          fromInputLabel={fromInputLabel}\n          toInputLabel={toInputLabel}\n        />\n        <PickerBodyContainer\n          className={`${className} ${editting ? 'open' : ''}`}\n          editting={editting}\n        >\n          <Header\n            selectedDate={fromDate}\n            prev={this.prevMonth}\n            next={this.nextMonth}\n            view=\"range\"\n            fromMonth={fromMonth}\n            toMonth={toMonth}\n            formatMonthYear=\"MMMM YYYY\"\n          />\n          <RangeCell\n            minDate={minDate}\n            maxDate={maxDate}\n            fromMonth={fromMonth}\n            toMonth={toMonth}\n            onItemClick={this.onItemClick}\n            showConfirmButton={false}\n            view=\"range\"\n            fromDate={fromDate}\n            toDate={toDate}\n            whetherFirstInput={whetherFirstInput}\n          />\n          <Footer\n            onTimeEditting={this.onTimeEditting}\n            onCancel={this.onCancel}\n            onSave={this.onSave}\n            buttonCounter={buttonCounter}\n            showConfirmButton\n            confirmButtonMessage=\"Confirm\"\n          />\n        </PickerBodyContainer>\n      </RangePickerContainer>\n    );\n  }\n}\n\nRangePicker.defaultProps = {\n  minDate: undefined,\n  maxDate: undefined,\n  className: '',\n  withLabel: true,\n  fromInputLabel: 'From',\n  toInputLabel: 'To',\n  defaultFromInput: new Date(),\n  defaultToInput: new Date(),\n  onRangeSelected: () => { },\n};\n\nRangePicker.propTypes = {\n  minDate: PropTypes.instanceOf(Date),\n  maxDate: PropTypes.instanceOf(Date),\n  className: PropTypes.string,\n  withLabel: PropTypes.bool,\n  fromInputLabel: PropTypes.string,\n  toInputLabel: PropTypes.string,\n  defaultFromInput: PropTypes.instanceOf(Date),\n  defaultToInput: PropTypes.instanceOf(Date),\n  onRangeSelected: PropTypes.func,\n};\n\nexport default RangePicker;\n"],"mappings":"AAiBA","sourceRoot":""}